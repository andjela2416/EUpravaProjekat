version: '3.8'

services:

  healthcare_service:
    image: healthcare_service
    container_name: healthcare_service
    build:
      context: .
      dockerfile: ./healthcare-service/Dockerfile
    restart: always
    ports:
      - ${HEALTHCARE_SERVICE_PORT}:${HEALTHCARE_SERVICE_PORT}
    environment:
      HEALTHCARE_DB_HOST: ${HEALTHCARE_DB_HOST}
      HEALTHCARE_DB_PORT: ${HEALTHCARE_DB_PORT}
      HEALTHCARE_SERVICE_PORT: ${HEALTHCARE_SERVICE_PORT}
      HEALTHCARE_SERVICE_HOST: ${HEALTHCARE_SERVICE_HOST}
      FOOD_DB_HOST: ${FOOD_DB_HOST}
      FOOD_DB_PORT: ${FOOD_DB_PORT}
      FOOD_SERVICE_PORT: ${FOOD_SERVICE_PORT}
      FOOD_SERVICE_HOST: ${FOOD_SERVICE_HOST}
    depends_on:
      - healthcare_db
    networks:
      - network
    volumes:
      - logs_volume:/logs

  food_service:
    image: food_service
    container_name: food_service
    build:
      context: .
      dockerfile: ./food-service/Dockerfile
    restart: always
    ports:
      - ${FOOD_SERVICE_PORT}:${FOOD_SERVICE_PORT}
    environment:
      HEALTHCARE_DB_HOST: ${HEALTHCARE_DB_HOST}
      HEALTHCARE_DB_PORT: ${HEALTHCARE_DB_PORT}
      HEALTHCARE_SERVICE_PORT: ${HEALTHCARE_SERVICE_PORT}
      HEALTHCARE_SERVICE_HOST: ${HEALTHCARE_SERVICE_HOST}
      FOOD_DB_HOST: ${FOOD_DB_HOST}
      FOOD_DB_PORT: ${FOOD_DB_PORT}
      FOOD_SERVICE_PORT: ${FOOD_SERVICE_PORT}
      FOOD_SERVICE_HOST: ${FOOD_SERVICE_HOST}
    depends_on:
      - food_db
    networks:
      - network
    volumes:
      - logs_volume:/logs

  api_gateway:
    build:
      context: ./api_gateway/
      dockerfile: Dockerfile
    container_name: api_gateway
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    networks:
      - network

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    restart: always
    container_name: auth-service
    hostname: "auth-service"
    ports:
      - 8080:8080
    environment:
      - PORT=8080
      - MONGO_DB_URI=mongodb://root:pass@user_data_base:27017
    depends_on:
      user_data_base:
        condition: service_healthy
    networks:
      - network

  user_data_base:
    hostname: "user_data_base"
    container_name: "user_data_base"
    image: mongo
    restart: always
    ports:
      - "27019:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: userDB
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - user_data_base:/data/db
    networks:
      - network

  # keycloak:
  #   image: jboss/keycloak:latest
  #   container_name: keycloak
  #   build:
  #     context: .
  #   environment:
  #     - KEYCLOAK_USER=admin
  #     - KEYCLOAK_PASSWORD=admin
  #     - KEYCLOAK_CLIENT_ID=euprava
  #     - KEYCLOAK_CLIENT_SECRET=dz0a1vY7Jqgbw59W0KiZs1rffuHB2a1t
  #     - KEYCLOAK_REDIRECT_URL=http://localhost:8080/callback
  #   volumes:
  #     - ./.containers/keycloak:/opt/jboss/keycloak/standalone/data
  #   ports:
  #     - 18080:8080

  healthcare_db:
    image: mongo
    container_name: healthcare_db
    restart: on-failure
    networks:
      - network

  food_db:
    image: mongo
    container_name: food_db
    restart: on-failure
    networks:
      - network

volumes:
  user_data_base:
  logs_volume:

networks:
  network:
    driver: bridge