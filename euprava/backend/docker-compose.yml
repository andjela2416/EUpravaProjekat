version: '3.8'

services:

  healthcare_service:
    image: healthcare_service
    container_name: healthcare_service
    build:
      context: .
      dockerfile: ./healthcare-service/Dockerfile
    restart: always
    ports:
      - ${HEALTHCARE_SERVICE_PORT}:${HEALTHCARE_SERVICE_PORT}
    environment:
      HEALTHCARE_DB_HOST: ${HEALTHCARE_DB_HOST}
      HEALTHCARE_DB_PORT: ${HEALTHCARE_DB_PORT}
      HEALTHCARE_SERVICE_PORT: ${HEALTHCARE_SERVICE_PORT}
      HEALTHCARE_SERVICE_HOST: ${HEALTHCARE_SERVICE_HOST}
      FOOD_DB_HOST: ${FOOD_DB_HOST}
      FOOD_DB_PORT: ${FOOD_DB_PORT}
      FOOD_SERVICE_PORT: ${FOOD_SERVICE_PORT}
      FOOD_SERVICE_HOST: ${FOOD_SERVICE_HOST}
      UNIVERSITY_DB_HOST: ${UNIVERSITY_DB_HOST}
      UNIVERSITY_DB_PORT: ${UNIVERSITY_DB_PORT}
      UNIVERSITY_SERVICE_PORT: ${UNIVERSITY_SERVICE_PORT}
      UNIVERSITY_SERVICE_HOST: ${UNIVERSITY_SERVICE_HOST}
    depends_on:
      - healthcare_db
    networks:
      - network
    volumes:
      - logs_volume:/logs

  food_service:
    image: food_service
    container_name: food_service
    build:
      context: .
      dockerfile: ./food-service/Dockerfile
    restart: always
    ports:
      - ${FOOD_SERVICE_PORT}:${FOOD_SERVICE_PORT}
    environment:
      HEALTHCARE_DB_HOST: ${HEALTHCARE_DB_HOST}
      HEALTHCARE_DB_PORT: ${HEALTHCARE_DB_PORT}
      HEALTHCARE_SERVICE_PORT: ${HEALTHCARE_SERVICE_PORT}
      HEALTHCARE_SERVICE_HOST: ${HEALTHCARE_SERVICE_HOST}
      FOOD_DB_HOST: ${FOOD_DB_HOST}
      FOOD_DB_PORT: ${FOOD_DB_PORT}
      FOOD_SERVICE_PORT: ${FOOD_SERVICE_PORT}
      FOOD_SERVICE_HOST: ${FOOD_SERVICE_HOST}
    depends_on:
      - food_db
    networks:
      - network
    volumes:
      - logs_volume:/logs

  api_gateway:
    build:
      context: ./api_gateway/
      dockerfile: Dockerfile
    container_name: api_gateway
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    networks:
      - network
      
  dorm_service:
    image: dorm_service
    container_name: dorm_service
    build:
      context: ./dorm-service/
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - ${DORM_SERVICE_PORT}:${DORM_SERVICE_PORT}
    environment:
      DORM_SERVICE_PORT: ${DORM_SERVICE_PORT}
      DORM_SERVICE_HOST: ${DORM_SERVICE_HOST}
      DORM_DB_HOST: ${DORM_DB_HOST}
      DORM_DB_PORT: ${DORM_DB_PORT}
    depends_on:
      - dorm_db
    networks:
      - network
    volumes:
      - logs_volume:/logs
       
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    restart: always
    container_name: auth-service
    hostname: "auth-service"
    ports:
      - 8080:8080
    environment:
      - PORT=8080
      - MONGO_DB_URI=mongodb://root:pass@user_data_base:27017
    depends_on:
      user_data_base:
        condition: service_healthy
    networks:
      - network

  user_data_base:
    hostname: "user_data_base"
    container_name: "user_data_base"
    image: mongo
    restart: always
    ports:
      - "27019:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: userDB
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - user_data_base:/data/db
    networks:
      - network

  university-service:
    build:
      context: ./university-service
    restart: always
    container_name: university-service
    ports:
      - 8088:8088
    environment:
      - PORT=8088
      - MONGO_DB_URI=mongodb://root:pass@university_data_base:27017
    networks:
      - network

  university_data_base:
    hostname: "university_data_base"
    container_name: "university_data_base"
    image: mongo
    restart: always
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: studentDB
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - university_data_base:/data/db
    networks:
      - network
      
  healthcare_db:
    image: mongo
    container_name: healthcare_db
    restart: on-failure
    networks:
      - network

  food_db:
    image: mongo
    container_name: food_db
    restart: on-failure
    networks:
      - network

  dorm_db:
    hostname: dorm_db
    container_name: dorm_db
    image: mongo
    restart: on-failure
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - network

volumes:
  user_data_base:
  university_data_base:
  logs_volume:

networks:
  network:
    driver: bridge
